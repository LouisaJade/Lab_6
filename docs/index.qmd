---
project:
  title: "Lab_6"
  output-dir: docs
  type: website
format:
  html:
    self-contained: true
---

```{r}
options(repos = c(CRAN = "https://cran.rstudio.com/"))

```



```{r}
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
```


```{r}
root  <- 'https://gdex.ucar.edu/dataset/camels/file'


download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', 
              'camels_attributes_v2.0.pdf')


types <- c("clim", "geol", "soil", "topo", "vege", "hydro")


remote_files  <- glue('{root}/camels_{types}.txt')

local_files   <- glue('{root}/camels_{types}.txt')


walk2(remote_files, local_files, download.file, quiet = TRUE)


camels <- map(local_files, read_delim, show_col_types = FALSE) 


camels <- power_full_join(camels ,by = 'gauge_id')
```

##Question 1
```{r}
#zero_q_freq represents the frequency of days when flow equals 0 mm/day. It is used to determine the number of days when there is no measurable flow in a river/stream of interest.
```




```{r}
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = q_mean)) +
  scale_color_gradient(low = "pink", high = "dodgerblue") +
  ggthemes::theme_map()

scale_color_manual(values = c("dodgerblue", "yellow", "pink")) #lets you pick your own colors.
```

##Question 2
```{r}
library(ggplot2)
library(ggthemes)
library(ggpubr)

map_aridity <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = aridity)) +
  scale_color_gradient(low = "orange", high = "darkblue") + 
  ggthemes::theme_map() +
  labs(title = "Map of Aridity", color = "Aridity") +
  theme(legend.position = "right")


map_p_mean <- ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
  borders("state", colour = "gray50") +
  geom_point(aes(color = p_mean)) +
  scale_color_gradient(low = "yellow", high = "darkblue") +
  ggthemes::theme_map() +
  labs(title = "Map of Precipitation (p_mean)", color = "Precipitation") +
  theme(legend.position = "right")

combined_map <- ggarrange(map_aridity, map_p_mean, ncol = 1, nrow = 2)

print(map_aridity)
print(map_p_mean)
print(combined_map)
```


```{r}
camels |> 
  select(aridity, p_mean, q_mean) |> 
  drop_na() |> 
  cor()
```


```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm", color = "red", linetype = 2) +
  scale_color_viridis_c() +
  theme_linedraw() + 
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c() +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom") + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow")
```

```{r}
ggplot(camels, aes(x = aridity, y = p_mean)) +
  geom_point(aes(color = q_mean)) +
  geom_smooth(method = "lm") +
  scale_color_viridis_c(trans = "log") +
  scale_x_log10() + 
  scale_y_log10() +
  theme_linedraw() +
  theme(legend.position = "bottom",
        legend.key.width = unit(2.5, "cm"),
        legend.key.height = unit(.5, "cm")) + 
  labs(title = "Aridity vs Rainfall vs Runnoff", 
       x = "Aridity", 
       y = "Rainfall",
       color = "Mean Flow") 
```


```{r}
set.seed(123)
camels <- camels |> 
  mutate(logQmean = log(q_mean))

camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)
```

```{r}
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  step_log(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) |> 
  step_naomit(all_predictors(), all_outcomes())
```

```{r}
baked_data <- prep(rec, camels_train) |> 
  bake(new_data = NULL)

lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)
```

```{r}
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))
```

```{r}
test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
```

```{r}
metrics(test_data, truth = logQmean, estimate = lm_pred)
```

```{r}
ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
  scale_color_gradient2(low = "brown", mid = "orange", high = "darkgreen") +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_linedraw() + 
  labs(title = "Linear Model: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")
```


```{r}
lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")

lm_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(lm_model) %>%
  fit(data = camels_train) 

summary(extract_fit_engine(lm_wf))$coefficients
```

```{r}
summary(lm_base)$coefficients
```

```{r}
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
```

```{r}
metrics(lm_data, truth = logQmean, estimate = .pred)
```

```{r}
ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```

```{r}
install.packages("ranger")
```


```{r}
library(baguette)
library(tidymodels)

rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

rf_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(rf_model)  

rf_fit <- fit(rf_wf, data = camels_train)

print(rf_fit)
```

```{r}
rf_data <- augment(rf_fit, new_data = camels_test)
dim(rf_data)
```

```{r}
metrics(rf_data, truth = logQmean, estimate = .pred)
```

```{r}
ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw()
```

```{r}
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
  workflow_map('fit_resamples', resamples = camels_cv) 

autoplot(wf)
```

```{r}
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
```

##Question 3
```{r}
install.packages("xgboost")
```


```{r}
library(tidymodels)
library(baguette)
library(tidyr)

xgboost_model <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")

nn_model <- bag_mlp() %>%
  set_engine("nnet") %>%
  set_mode("regression")

wf_set <- workflow_set(
  list(rec), 
  list(lm_model, rf_model, xgboost_model, nn_model)
)

wf_set_results <- wf_set %>%
  workflow_map("fit_resamples", resamples = camels_cv)

autoplot(wf_set_results)

rank_results(wf_set_results, rank_metric = "rsq", select_best = TRUE)
```

```{r}
#I would move forward with the Bagged MLP model because it is the best model according to both RMSE and R-squared values. It provides the most accurate predictions out of the four models but Linear Regression or Random Forest could be used as well due to falling just short of Bagged MLP.
```

##Build Your Own
```{r}
install.packages("rsample")
library(rsample)

set.seed(123)

camels_split <- initial_split(camels, prop = 0.75)
camels_train <- training(camels_split)
camels_test  <- testing(camels_split)

camels_cv <- vfold_cv(camels_train, v = 10)
```

```{r}
formula <- logQmean ~ aridity + p_mean + vege + topo + geol
```

```{r}
library(tidyverse)
library(recipes)

rec <- recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
  step_log(all_predictors()) %>%
  step_interact(terms = ~ aridity:p_mean) %>%
  step_naomit(all_predictors(), all_outcomes())
```

```{r}
library(tidymodels)

rf_model <- rand_forest() %>%
  set_engine("ranger", importance = "impurity") %>%
  set_mode("regression")

lm_model <- linear_reg() %>%
  set_engine("lm") %>%
  set_mode("regression")

xgboost_model <- boost_tree() %>%
  set_engine("xgboost") %>%
  set_mode("regression")
```

```{r}
wf_set <- workflow_set(
  list(rec), 
  list(lm_model, rf_model, xgboost_model)
)

wf_set_results <- wf_set %>%
  workflow_map("fit_resamples", resamples = camels_cv)

autoplot(wf_set_results)

rank_results(wf_set_results, rank_metric = "rsq", select_best = TRUE)
```

```{r}
best_model <- rf_model
best_wf <- workflow() %>%
  add_recipe(rec) %>%
  add_model(best_model) %>%
  fit(data = camels_train)

test_data <- bake(prep(rec), new_data = camels_test)
test_data$rf_pred <- predict(best_wf, new_data = test_data)$.pred

metrics(test_data, truth = logQmean, estimate = rf_pred)

ggplot(test_data, aes(x = logQmean, y = rf_pred, colour = aridity)) +
  scale_color_viridis_c() +
  geom_point() +
  geom_abline() +
  theme_linedraw() +
  labs(title = "Random Forest: Observed vs Predicted",
       x = "Observed Log Mean Flow",
       y = "Predicted Log Mean Flow",
       color = "Aridity")

```

```{r}
library(tidymodels)

final_model <- workflow() %>%
  add_recipe(rec) %>%
  add_model(best_model) %>%
  fit(data = camels_train)

final_predictions <- augment(final_model, new_data = camels_test)

ggplot(final_predictions, aes(x = logQmean, y = .pred)) +
  geom_point() +
  geom_abline(linetype = 2) +
  theme_minimal() +
  labs(title = "Observed vs Predicted Log Mean Flow",
       x = "Observed", 
       y = "Predicted")
```

